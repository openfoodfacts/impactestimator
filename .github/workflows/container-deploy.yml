name: Docker Compose Deployment CI

on:
  push:
    branches:
      - main
      - deploy-*
    tags:
      - v*.*.*

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Note: versions are deployed to prod, while branches are deployed to preprod
        # hence the use of startsWith(github.ref, 'refs/tags/v')
          compose_project_name:
          - ${{ startsWith(github.ref, 'refs/tags/v') && 'ie_org' || 'ie_net' }}
          docker_cpus:
          - ${{ startsWith(github.ref, 'refs/tags/v') && '2.0' || '0.25' }}
          env:
          - ${{ startsWith(github.ref, 'refs/tags/v') && "" || "" }}
          explorer_port:
          - ${{ startsWith(github.ref, 'refs/tags/v') && "8042" || "8043" }}
    environment: ${{ matrix.env }}
    concurrency: ${{ matrix.env }}
    steps:
      - name: Wait for container build workflow
        uses: tomchv/wait-my-workflow@v1.1.0
        id: wait-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: build
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          intervalSeconds: 10
          timeoutSeconds: 600 # 10m

      - name: Do something if build isn't launch
        if: steps.wait-build.outputs.conclusion == 'does not exist'
        run: echo job does not exist && true

      - name: Do something if build fail
        if: steps.wait-build.outputs.conclusion == 'failure'
        run: echo fail && false # fail if build fail

      - name: Do something if build timeout
        if: steps.wait-build.outputs.conclusion == 'timed_out'
        run: echo Timeout && false # fail if build time out

      - name: Checkout git repository
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            # Clone Git repository if not already there
            [ ! -d '${{ matrix.env }}' ] && git clone --depth 1 https://github.com/${{ github.repository }} ${{ matrix.env }} --no-single-branch 2>&1

            # Go to repository directory
            cd ${{ matrix.env }}

            # Fetch newest commits (in case it wasn't freshly cloned)
            git fetch --depth 1

            # Checkout current commit SHA
            git checkout -qf ${{ github.sha }}

      - name: Set environment variables
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            ## Estimator
            # Go to repository directory
            cd ${{ matrix.env }}

            # Set Docker Compose variables
            echo > .env
            echo "DOCKER_CLIENT_TIMEOUT=120" >> .env
            echo "COMPOSE_HTTP_TIMEOUT=120" >> .env
            echo "COMPOSE_PROJECT_NAME=${{ matrix.compose_project_name  }}" >> .env
            echo "COMPOSE_PATH_SEPARATOR=;" >> .env
            echo "COMPOSE_FILE=docker-compose.yml" >> .env
            echo "DOCKER_CPUS=${{ matrix.docker_cpus }}" >> .env
            echo "TAG=sha-${{ github.sha }}" >> .env

            # App environment variables
            echo "PRODUCT_OPENER_URL=${{ secrets.PRODUCT_OPENER_URL }}" >> .env
            echo "PRODUCT_OPENER_USERNAME=${{ secrets.PRODUCT_OPENER_USERNAME }}" >> .env
            echo "PRODUCT_OPENER_PASSWORD=${{ secrets.PRODUCT_OPENER_PASSWORD }}" >> .env
            echo "PRODUCT_OPENER_BASIC_AUTH_USERNAME=${{ secrets.PRODUCT_OPENER_BASIC_AUTH_USERNAME }}" >> .env
            echo "PRODUCT_OPENER_BASIC_AUTH_PASSWORD=${{ secrets.PRODUCT_OPENER_BASIC_AUTH_PASSWORD }}" >> .env
            echo "PRODUCT_OPENER_HOST_HEADER=${{ secrets.PRODUCT_OPENER_HOST_HEADER }}" >> .env
            echo "MONITORING_PORT=${{ secrets.MONITORING_PORT }}" >> .env

            ## Explorer
            # Go to repository directory
            cd && cd ${{ matrix.env }}/explorer

            # Set Docker Compose variables
            echo > .env
            echo "DOCKER_CLIENT_TIMEOUT=120" >> .env
            echo "COMPOSE_HTTP_TIMEOUT=120" >> .env
            echo "COMPOSE_PROJECT_NAME=${{ matrix.compose_project_name  }}_explorer" >> .env
            echo "TAG=sha-${{ github.sha }}" >> .env

            # App environment variables
            # expose globaly on 8042
            echo "EXPOSE={{ matrix.explorer_port }}" >> .env

      - name: Start services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            # Estimator
            cd ${{ matrix.env }}
            make up
            # Explorer
            cd && cd ${{ matrix.env }}/explorer
            docker-compose up -d

      - name: Check services are up
        uses: appleboy/ssh-action@master
        if: ${{ always() }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            # Estimator
            cd ${{ matrix.env }}
            make livecheck
            # Explorer
            cd && cd ${{ matrix.env }}/explorer
            docker-compose ps --filter Status=Up explorer|grep explorer

      - name: Cleanup obsolete Docker objects
        uses: appleboy/ssh-action@master
        if: ${{ always() }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            cd ${{ matrix.env }}
            make prune
